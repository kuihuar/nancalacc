syntax = "proto3";
package kratos.api;

option go_package = "nancalacc/internal/conf;conf";

import "google/protobuf/duration.proto";

message Bootstrap {
  Server server = 1;
  Data data = 2;
  App app = 3;
  Auth auth = 4;
  OpenTelemetry otel = 5;
}

message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  HTTP http = 1;
  GRPC grpc = 2;
}

message Data {
  message Database {
    string driver = 1;
    string source = 2;
    int32 max_open_conns = 3;
    int32 max_idle_conns = 4;
    string conn_max_lifetime = 5;
    string tag = 6;
    string source_key = 7;
    string env = 8;
    bool enable = 9;
  }
  message DatabaseSync {
    string driver = 1;
    string source = 2;
    int32 max_open_conns = 3;
    int32 max_idle_conns = 4;
    string conn_max_lifetime = 5;
    string tag = 6;
    string source_key = 7;
    string env = 8;
  }
  message Redis {
    string network = 1;
    string addr = 2;
    string password = 3;
    int32 db = 4;
    bool enable = 5;
    google.protobuf.Duration read_timeout = 6;
    google.protobuf.Duration write_timeout = 7;
  }
  message Etcd {
    repeated string endpoints = 1;
    string dial_timeout = 2;
    string config_prefix = 3;
    bool enable_config_watch = 4;
    bool enable = 5;
  }
  Database database = 1;
  DatabaseSync database_sync = 2;
  Redis redis = 3;
  Etcd etcd = 4;
}

message App {
  string id = 1;
  string name = 2;
  string version = 3;
  string env = 4;
  string app_package = 5;
  string app_id = 6;
  string app_secret = 7;
  string third_company_id = 8;
  string platform_ids = 9;
  string company_id = 10;
  string access_key = 11;
  string secret_key = 12;
}

// OpenTelemetry 统一配置
message OpenTelemetry {
  bool enabled = 1;
  string service_name = 2;
  string service_version = 3;
  string environment = 4;
  
  // 追踪配置
  TracesConfig traces = 5;
  
  // 指标配置
  MetricsConfig metrics = 6;
  
  // 日志配置
  LogsConfig logs = 7;
}

// 日志配置
message LogsConfig {
  bool enabled = 1;
  string level = 2;
  string format = 3;
  string output = 4;
  string file_path = 5;
  int32 max_size = 6;
  int32 max_backups = 7;
  int32 max_age = 8;
  bool compress = 9;
  bool caller = 10;
  bool stacktrace = 11;
  bool escape_newlines = 12;
  GormLog gorm = 13;
  LokiConfig loki = 14;
}

// Loki配置
message LokiConfig {
  bool enabled = 1;
  string endpoint = 2;
}

// GORM日志配置
message GormLog {
  string slow_threshold = 1;
  string log_level = 2;
}

// 追踪配置
message TracesConfig {
  bool enabled = 1;
  bool verbose_logging = 2;
  bool log_request_size = 3;
  bool log_response_size = 4;
  bool log_headers = 5;
  bool log_query_params = 6;
  JaegerConfig jaeger = 7;
  OtlpConfig otlp = 8;
  PrometheusConfig prometheus = 9;
}

// 指标配置
message MetricsConfig {
  bool enabled = 1;
  PrometheusConfig prometheus = 2;
}

// Jaeger配置
message JaegerConfig {
  bool enabled = 1;
  string endpoint = 2;
}

// OTLP配置
message OtlpConfig {
  bool enabled = 1;
  string endpoint = 2;
  int32 timeout = 3;
}

// Prometheus配置
message PrometheusConfig {
  bool enabled = 1;
  string endpoint = 2;
  string interval = 3;
}

message Auth {
  message Wpsapp {
    string client_id = 1;
    string client_secret = 2;
    string auth_url = 3;
    string auth_path = 4;
    string grant_type = 5;
  }

  message Dingtalk {
    string endpoint = 1;
    string app_key = 2;
    string app_secret = 3;
    string timeout = 4;
    int64 maxConcurrent = 5;
  }
  Wpsapp wpsapp = 1;
  Dingtalk dingtalk= 2;
}
