// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"nancalacc/internal/biz"
	"nancalacc/internal/conf"
	"nancalacc/internal/data"
	"nancalacc/internal/dingtalk"
	"nancalacc/internal/otel"
	"nancalacc/internal/repository"
	"nancalacc/internal/server"
	"nancalacc/internal/service"
	"nancalacc/internal/task"
	"nancalacc/internal/wps"

	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"

	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application with OpenTelemetry integration.
func wireApp(confServer *conf.Server, confData *conf.Data, openTelemetry *conf.OpenTelemetry, integration *otel.Integration) (*kratos.App, func(), error) {
	logger := provideLogger(integration)
	databaseFactory := data.NewDatabaseFactory(confData, logger, openTelemetry)
	client, err := data.NewRedisClient(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewDataWithFactory(databaseFactory, client, logger)
	if err != nil {
		return nil, nil, err
	}
	accountRepository := repository.NewAccountRepository(dataData, logger)
	dingtalkDingtalk := dingtalk.NewDingTalkRepo(logger)
	wpsWps := wps.NewWps(logger)
	cacheRepository := repository.NewCacheRepository(logger)
	accounterUsecase := biz.NewAccounterUsecase(accountRepository, dingtalkDingtalk, wpsWps, cacheRepository, logger)
	oauth2Usecase := biz.NewOauth2Usecase(dingtalkDingtalk, logger)
	fullSyncUsecase := biz.NewFullSyncUsecase(accountRepository, dingtalkDingtalk, wpsWps, cacheRepository, logger)
	accountService := service.NewAccountService(accounterUsecase, oauth2Usecase, fullSyncUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, accountService, integration)
	httpServer := server.NewHTTPServer(confServer, accountService, integration, openTelemetry)
	cronService := task.NewCronServiceWithJobs(fullSyncUsecase, dataData, logger)
	incrementalSyncUsecase := biz.NewIncrementalSyncUsecase(accountRepository, dingtalkDingtalk, wpsWps, logger)
	dingTalkEventService := service.NewDingTalkEventService(incrementalSyncUsecase, logger)
	app := newApp(integration, grpcServer, httpServer, cronService, dingTalkEventService)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// provideLogger creates a logger from the integration
func provideLogger(integration *otel.Integration) log.Logger {
	return integration.CreateLogger()
}
